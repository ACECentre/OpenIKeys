#include "IKCommon.h"#include "IKString.h"#include "IKUtil.h"#include "IKFile.h"#include <sys/types.h>#include <sys/stat.h>static void MakeAllFolders(char *strpath){    IKString path(strpath);    for (int i=0;i<path.GetLength();i++)    {	if (path.GetAt(i)==':')	{	    IKString part = path.Left(i+1);	    //printf("Root Locator: creating folder %s\n",(char *)part);	    IKFile::NewFolder(part);	}    }}static void SetPriv ( char *path ){    //  make a copy of the path    //  start with /Volumes    //  change ':' to ':'    char newpath[255];    strcpy(newpath,"/Volumes/");        int i;    int j = strlen(newpath);    for (i=0;i<strlen(path);i++)    {        if (path[i]==':')            newpath[j] = '/';          else            newpath[j] = path[i];          j++;    }    newpath[j] = '\0';        int result = chmod ( newpath,0777);    //printf("Root Locator: chmod result = %d for is %s\n",result,newpath);    //perror("error setting privs");}static void MyPtoCstr2 ( unsigned char *str ){    int i, l;        l = str[0];    for (i=0;i<l;i++)	str[i] = str[i+1];    str[l] = 0;}static void MyCtoPstr2 ( unsigned char *str){    int i, l, j;        l = 0;    while (str[l]!=0)	l++;		    for (i=0;i<l;i++)    {	j = l-i-1;	str[j+1] = str[j];    }    str[0] = l;}static void GetFullPath2 (long DirID, short vRefNum, char *path){	CInfoPBRec myPB;// parameter block for PBGetCatInfo	Str255 dirNameBuf; //  a directory name	char fullPath[255];//  full pathname being constructed	OSErr myErr;	myPB.dirInfo.ioNamePtr = dirNameBuf;	myPB.dirInfo.ioVRefNum = vRefNum;    //indicate target volume	myPB.dirInfo.ioDrParID = DirID;      //initialize parent directory ID	myPB.dirInfo.ioFDirIndex = -1;       //get info about a directory		strcpy(fullPath,"");	strcpy(path,"");	do	{		myPB.dirInfo.ioDrDirID = myPB.dirInfo.ioDrParID;		myErr = PBGetCatInfo(&myPB, FALSE);		if ( myErr )			return;		MyPtoCstr2 ( dirNameBuf );				char temp[255];		strcpy(temp,fullPath);		strcpy(fullPath,(char *)dirNameBuf);		strcat(fullPath,":");		strcat(fullPath,temp);	} while ( myPB.dirInfo.ioDrDirID != fsRtDirID );	strcpy(path,fullPath);	return;}int main (int argc, const char * argv[]) {    short vRefNum;    long dirID;    char osx_path[255];    char root_path[255];    char osx_folder[255];    int i;    //char classic_folder[255];    //char classic_path[255];        //  Find the application support folder for OS X        FindFolder ( kOnSystemDisk, kApplicationSupportFolderType, kDontCreateFolder, &vRefNum, &dirID );    GetFullPath2(dirID, vRefNum, osx_path);        //  Build the HFS-style path to the IK USB app folder        strcpy(root_path,osx_path);    i = 0;    while (root_path[i]!=':')	i++;    root_path[i+1] = '\0';    strcat(root_path, "Applications:IntelliTools:IntelliKeys USB:");    //printf("Root Locator: root_path is %s\n",root_path);    //  Create the path to the root file for OS X        strcat(osx_path,"IntelliTools:");    strcpy(osx_folder,osx_path);    strcat(osx_path,"IKUSBRoot.txt");    //printf("Root Locator: osx_path is %s\n",osx_path);    //printf("Root Locator: osx_folder is %s\n",osx_folder);        //  Find the application support folder for Classic        //FindFolder ( kClassicDomain, kApplicationSupportFolderType, kDontCreateFolder, &vRefNum, &dirID );    //GetFullPath2(dirID, vRefNum, classic_path);    //  Create the path to the root file for Classic.        //strcat(classic_path,"IntelliTools:");    //strcpy(classic_folder,classic_path);    //strcat(classic_path,"IKUSBRoot.txt");    //printf("Root Locator: classic_path is %s\n",classic_path);    //printf("Root Locator: classic_folder is %s\n",classic_folder);    if (argc == 2 && strcmp(argv[1],"create")==0)    {	//  create the files	//printf("Root Locator: creating files\n");		MakeAllFolders(osx_folder);        SetPriv ( osx_folder );	//MakeAllFolders(classic_folder);    //    SetPriv ( classic_folder );		IKFile f;	if (f.Open(IKString(osx_path),IKFile::modeCreate|IKFile::modeReadWrite))	{	    IKString line;	    line += "Root_Location     ";	    line += root_path;	    f.WriteLine(line);	    f.Close();	    //printf("Root Locator: created osx file\n");	}	//if (f.Open(IKString(classic_path),IKFile::modeCreate|IKFile::modeReadWrite))	//{	//   IKString line;	//    line += "Root_Location     ";	//    line += root_path;	//    f.WriteLine(line);	//    f.Close();	//    //printf("Root Locator: created classic file\n");	//}    }        else if (argc == 2 && strcmp(argv[1],"delete")==0)    {	//  delete the files	//printf("Root Locator: deleting files\n");		IKFile::Remove(osx_path);	//IKFile::Remove(classic_path);		//  delete IntelliTools folders if they are empty	//  delete hidden file .DS_STORE first, otherwise we get 	//     fBsyErr when we delete the folders.		char ds_store[255];		strcpy(ds_store,osx_folder);	strcat(ds_store,".DS_STORE");	IKFile::Remove(ds_store);		//strcpy(ds_store,classic_folder);	//strcat(ds_store,".DS_STORE");	//IKFile::Remove(ds_store);	IKFile::Remove(osx_folder);	//IKFile::Remove(classic_folder);    }        else    {	//  error, do nothing.	//printf("Root Locator: error in command arguments\n");    }        return 0;}